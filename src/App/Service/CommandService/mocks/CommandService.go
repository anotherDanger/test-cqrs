// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "test-cqrs/src/Domain"

	mock "github.com/stretchr/testify/mock"
)

// CommandService is an autogenerated mock type for the CommandService type
type CommandService struct {
	mock.Mock
}

// AddBook provides a mock function with given fields: ctx, entity
func (_m *CommandService) AddBook(ctx context.Context, entity *domain.Domain) (*domain.Domain, error) {
	ret := _m.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for AddBook")
	}

	var r0 *domain.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Domain) (*domain.Domain, error)); ok {
		return rf(ctx, entity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Domain) *domain.Domain); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Domain) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommandService creates a new instance of CommandService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommandService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommandService {
	mock := &CommandService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
