// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "test-cqrs/src/Domain"

	mock "github.com/stretchr/testify/mock"
)

// QueryService is an autogenerated mock type for the QueryService type
type QueryService struct {
	mock.Mock
}

// GetBook provides a mock function with given fields: ctx, key, params
func (_m *QueryService) GetBook(ctx context.Context, key string, params string) ([]*domain.Domain, error) {
	ret := _m.Called(ctx, key, params)

	if len(ret) == 0 {
		panic("no return value specified for GetBook")
	}

	var r0 []*domain.Domain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*domain.Domain, error)); ok {
		return rf(ctx, key, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*domain.Domain); ok {
		r0 = rf(ctx, key, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Domain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, key, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewQueryService creates a new instance of QueryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryService {
	mock := &QueryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
